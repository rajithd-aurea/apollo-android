// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.named_fragment_with_variables

import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.internal.InputFieldMarshaller
import com.apollographql.apollo.api.internal.QueryDocumentMinifier
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.example.named_fragment_with_variables.adapter.GetUser_ResponseAdapter
import com.example.named_fragment_with_variables.fragment.QueryFragment
import com.example.named_fragment_with_variables.fragment.UserFragment
import com.example.named_fragment_with_variables.type.UserQuery
import kotlin.Any
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.jvm.Transient

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
data class GetUser(
  val organizationId: String,
  val query: UserQuery,
  val size: Int
) : Query<GetUser.Data> {
  @Transient
  private val variables: Operation.Variables = object : Operation.Variables() {
    override fun valueMap(): Map<String, Any?> = mutableMapOf<String, Any?>().apply {
      this["organizationId"] = this@GetUser.organizationId
      this["query"] = this@GetUser.query
      this["size"] = this@GetUser.size
    }

    override fun marshaller(): InputFieldMarshaller {
      return InputFieldMarshaller.invoke { writer ->
        writer.writeString("organizationId", this@GetUser.organizationId)
        writer.writeObject("query", this@GetUser.query.marshaller())
        writer.writeInt("size", this@GetUser.size)
      }
    }
  }

  override fun operationId(): String = OPERATION_ID

  override fun queryDocument(): String = QUERY_DOCUMENT

  override fun variables(): Operation.Variables = variables

  override fun name(): String = OPERATION_NAME

  override fun adapter(): ResponseAdapter<Data> = GetUser_ResponseAdapter
  interface Data : Operation.Data {
    val __typename: String

    interface Query : Data, QueryFragment {
      override val organization: Organization?

      interface Organization : QueryFragment.Organization {
        override val user: List<User>

        interface User : QueryFragment.Organization.User {
          interface User : Organization.User, UserFragment, QueryFragment.Organization.User.User,
              QueryFragment.Organization.User

          companion object {
            fun Organization.User.asUser(): User? = this as? User

            fun Organization.User.userFragment(): UserFragment? = this as? UserFragment
          }
        }
      }
    }

    data class QueryData(
      override val __typename: String,
      override val organization: Organization?
    ) : Data, Query, QueryFragment {
      data class Organization(
        override val id: String,
        override val user: List<User>
      ) : Query.Organization, QueryFragment.Organization {
        interface User : Query.Organization.User, QueryFragment.Organization.User {
          data class UserUser(
            override val __typename: String,
            override val firstName: String,
            override val lastName: String,
            override val avatar: String
          ) : Query.Organization.User, Query.Organization.User.User, UserFragment,
              QueryFragment.Organization.User.User, QueryFragment.Organization.User, User

          data class OtherUser(
            override val __typename: String
          ) : Query.Organization.User, QueryFragment.Organization.User, User
        }
      }
    }

    data class OtherData(
      override val __typename: String
    ) : Data

    companion object {
      fun Data.asQuery(): Query? = this as? Query

      fun Data.queryFragment(): QueryFragment? = this as? QueryFragment
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "f00812d485d5796cfb72c796a4634df360bd6ec06f95a7ac38e322819ac20889"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query GetUser(${'$'}organizationId: String!, ${'$'}query: UserQuery!, ${'$'}size: Int!) {
          |  __typename
          |  ...QueryFragment
          |}
          |fragment QueryFragment on Query {
          |  __typename
          |  organization(id: ${'$'}organizationId) {
          |    id
          |    user(query: ${'$'}query) {
          |      __typename
          |      ...UserFragment
          |    }
          |  }
          |}
          |fragment UserFragment on User {
          |  __typename
          |  firstName
          |  lastName
          |  avatar(size: ${'$'}size)
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: String = "GetUser"
  }
}

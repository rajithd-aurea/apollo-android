// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.union_inline_fragments.adapter

import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.ResponseReader
import com.apollographql.apollo.api.internal.ResponseWriter
import com.example.union_inline_fragments.TestQuery
import com.example.union_inline_fragments.type.Episode
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
  private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.List(ResponseField.Type.Named.Object("SearchResult")),
      responseName = "search",
      fieldName = "search",
      arguments = mapOf<String, Any?>(
        "text" to "test"),
      conditions = emptyList(),
    )
  )

  override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.Data {
    return reader.run {
      var search: List<TestQuery.Data.Search?>? = null
      while(true) {
        when (selectField(RESPONSE_FIELDS)) {
          0 -> search = readList<TestQuery.Data.Search>(RESPONSE_FIELDS[0]) { reader ->
            reader.readObject<TestQuery.Data.Search> { reader ->
              Search.fromResponse(reader)
            }
          }
          else -> break
        }
      }
      TestQuery.Data(
        search = search
      )
    }
  }

  override fun toResponse(writer: ResponseWriter, value: TestQuery.Data) {
    writer.writeList(RESPONSE_FIELDS[0], value.search) { value, listItemWriter ->
      listItemWriter.writeObject { writer ->
        Search.toResponse(writer, value)
      }
    }
  }

  object Search : ResponseAdapter<TestQuery.Data.Search> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        responseName = "__typename",
        fieldName = "__typename",
        arguments = emptyMap(),
        conditions = emptyList(),
      )
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.Data.Search {
      val typename = __typename ?: reader.readString(RESPONSE_FIELDS[0])
      return when(typename) {
        "Human" -> CharacterSearch.fromResponse(reader, typename)
        "Droid" -> CharacterSearch.fromResponse(reader, typename)
        "Starship" -> StarshipSearch.fromResponse(reader, typename)
        else -> OtherSearch.fromResponse(reader, typename)
      }
    }

    override fun toResponse(writer: ResponseWriter, value: TestQuery.Data.Search) {
      when(value) {
        is TestQuery.Data.Search.CharacterSearch -> CharacterSearch.toResponse(writer, value)
        is TestQuery.Data.Search.StarshipSearch -> StarshipSearch.toResponse(writer, value)
        is TestQuery.Data.Search.OtherSearch -> OtherSearch.toResponse(writer, value)
      }
    }

    object CharacterSearch : ResponseAdapter<TestQuery.Data.Search.CharacterSearch> {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "__typename",
          fieldName = "__typename",
          arguments = emptyMap(),
          conditions = emptyList(),
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "id",
          fieldName = "id",
          arguments = emptyMap(),
          conditions = emptyList(),
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "name",
          fieldName = "name",
          arguments = emptyMap(),
          conditions = emptyList(),
        ),
        ResponseField(
          type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
          responseName = "friends",
          fieldName = "friends",
          arguments = emptyMap(),
          conditions = emptyList(),
        )
      )

      override fun fromResponse(reader: ResponseReader, __typename: String?):
          TestQuery.Data.Search.CharacterSearch {
        return reader.run {
          var __typename: String? = __typename
          var id: String? = null
          var name: String? = null
          var friends: List<TestQuery.Data.Search.CharacterSearch.Friends?>? = null
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> __typename = readString(RESPONSE_FIELDS[0])
              1 -> id = readString(RESPONSE_FIELDS[1])
              2 -> name = readString(RESPONSE_FIELDS[2])
              3 -> friends = readList<TestQuery.Data.Search.CharacterSearch.Friends>(RESPONSE_FIELDS[3]) { reader ->
                reader.readObject<TestQuery.Data.Search.CharacterSearch.Friends> { reader ->
                  Friends.fromResponse(reader)
                }
              }
              else -> break
            }
          }
          TestQuery.Data.Search.CharacterSearch(
            __typename = __typename!!,
            id = id!!,
            name = name!!,
            friends = friends
          )
        }
      }

      override fun toResponse(writer: ResponseWriter,
          value: TestQuery.Data.Search.CharacterSearch) {
        writer.writeString(RESPONSE_FIELDS[0], value.__typename)
        writer.writeString(RESPONSE_FIELDS[1], value.id)
        writer.writeString(RESPONSE_FIELDS[2], value.name)
        writer.writeList(RESPONSE_FIELDS[3], value.friends) { value, listItemWriter ->
          listItemWriter.writeObject { writer ->
            Friends.toResponse(writer, value)
          }
        }
      }

      object Friends : ResponseAdapter<TestQuery.Data.Search.CharacterSearch.Friends> {
        private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            responseName = "__typename",
            fieldName = "__typename",
            arguments = emptyMap(),
            conditions = emptyList(),
          )
        )

        override fun fromResponse(reader: ResponseReader, __typename: String?):
            TestQuery.Data.Search.CharacterSearch.Friends {
          val typename = __typename ?: reader.readString(RESPONSE_FIELDS[0])
          return when(typename) {
            "Droid" -> CharacterDroidFriends.fromResponse(reader, typename)
            "Human" -> CharacterHumanFriends.fromResponse(reader, typename)
            else -> OtherFriends.fromResponse(reader, typename)
          }
        }

        override fun toResponse(writer: ResponseWriter,
            value: TestQuery.Data.Search.CharacterSearch.Friends) {
          when(value) {
            is TestQuery.Data.Search.CharacterSearch.Friends.CharacterDroidFriends -> CharacterDroidFriends.toResponse(writer, value)
            is TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends -> CharacterHumanFriends.toResponse(writer, value)
            is TestQuery.Data.Search.CharacterSearch.Friends.OtherFriends -> OtherFriends.toResponse(writer, value)
          }
        }

        object CharacterDroidFriends :
            ResponseAdapter<TestQuery.Data.Search.CharacterSearch.Friends.CharacterDroidFriends> {
          private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "__typename",
              fieldName = "__typename",
              arguments = emptyMap(),
              conditions = emptyList(),
            ),
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "name",
              fieldName = "name",
              arguments = emptyMap(),
              conditions = emptyList(),
            ),
            ResponseField(
              type = ResponseField.Type.Named.Other("String"),
              responseName = "primaryFunction",
              fieldName = "primaryFunction",
              arguments = emptyMap(),
              conditions = emptyList(),
            ),
            ResponseField(
              type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
              responseName = "friends",
              fieldName = "friends",
              arguments = emptyMap(),
              conditions = emptyList(),
            )
          )

          override fun fromResponse(reader: ResponseReader, __typename: String?):
              TestQuery.Data.Search.CharacterSearch.Friends.CharacterDroidFriends {
            return reader.run {
              var __typename: String? = __typename
              var name: String? = null
              var primaryFunction: String? = null
              var friends: List<TestQuery.Data.Search.CharacterSearch.Friends.CharacterDroidFriends.Friends?>? = null
              while(true) {
                when (selectField(RESPONSE_FIELDS)) {
                  0 -> __typename = readString(RESPONSE_FIELDS[0])
                  1 -> name = readString(RESPONSE_FIELDS[1])
                  2 -> primaryFunction = readString(RESPONSE_FIELDS[2])
                  3 -> friends = readList<TestQuery.Data.Search.CharacterSearch.Friends.CharacterDroidFriends.Friends>(RESPONSE_FIELDS[3]) { reader ->
                    reader.readObject<TestQuery.Data.Search.CharacterSearch.Friends.CharacterDroidFriends.Friends> { reader ->
                      Friends.fromResponse(reader)
                    }
                  }
                  else -> break
                }
              }
              TestQuery.Data.Search.CharacterSearch.Friends.CharacterDroidFriends(
                __typename = __typename!!,
                name = name!!,
                primaryFunction = primaryFunction,
                friends = friends
              )
            }
          }

          override fun toResponse(writer: ResponseWriter,
              value: TestQuery.Data.Search.CharacterSearch.Friends.CharacterDroidFriends) {
            writer.writeString(RESPONSE_FIELDS[0], value.__typename)
            writer.writeString(RESPONSE_FIELDS[1], value.name)
            writer.writeString(RESPONSE_FIELDS[2], value.primaryFunction)
            writer.writeList(RESPONSE_FIELDS[3], value.friends) { value, listItemWriter ->
              listItemWriter.writeObject { writer ->
                Friends.toResponse(writer, value)
              }
            }
          }

          object Friends :
              ResponseAdapter<TestQuery.Data.Search.CharacterSearch.Friends.CharacterDroidFriends.Friends>
              {
            private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                responseName = "id",
                fieldName = "id",
                arguments = emptyMap(),
                conditions = emptyList(),
              )
            )

            override fun fromResponse(reader: ResponseReader, __typename: String?):
                TestQuery.Data.Search.CharacterSearch.Friends.CharacterDroidFriends.Friends {
              return reader.run {
                var id: String? = null
                while(true) {
                  when (selectField(RESPONSE_FIELDS)) {
                    0 -> id = readString(RESPONSE_FIELDS[0])
                    else -> break
                  }
                }
                TestQuery.Data.Search.CharacterSearch.Friends.CharacterDroidFriends.Friends(
                  id = id!!
                )
              }
            }

            override fun toResponse(writer: ResponseWriter,
                value: TestQuery.Data.Search.CharacterSearch.Friends.CharacterDroidFriends.Friends) {
              writer.writeString(RESPONSE_FIELDS[0], value.id)
            }
          }
        }

        object CharacterHumanFriends :
            ResponseAdapter<TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends> {
          private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "__typename",
              fieldName = "__typename",
              arguments = emptyMap(),
              conditions = emptyList(),
            ),
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "name",
              fieldName = "name",
              arguments = emptyMap(),
              conditions = emptyList(),
            ),
            ResponseField(
              type = ResponseField.Type.Named.Other("String"),
              responseName = "homePlanet",
              fieldName = "homePlanet",
              arguments = emptyMap(),
              conditions = emptyList(),
            ),
            ResponseField(
              type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
              responseName = "friends",
              fieldName = "friends",
              arguments = emptyMap(),
              conditions = emptyList(),
            )
          )

          override fun fromResponse(reader: ResponseReader, __typename: String?):
              TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends {
            return reader.run {
              var __typename: String? = __typename
              var name: String? = null
              var homePlanet: String? = null
              var friends: List<TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends?>? = null
              while(true) {
                when (selectField(RESPONSE_FIELDS)) {
                  0 -> __typename = readString(RESPONSE_FIELDS[0])
                  1 -> name = readString(RESPONSE_FIELDS[1])
                  2 -> homePlanet = readString(RESPONSE_FIELDS[2])
                  3 -> friends = readList<TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends>(RESPONSE_FIELDS[3]) { reader ->
                    reader.readObject<TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends> { reader ->
                      Friends.fromResponse(reader)
                    }
                  }
                  else -> break
                }
              }
              TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends(
                __typename = __typename!!,
                name = name!!,
                homePlanet = homePlanet,
                friends = friends
              )
            }
          }

          override fun toResponse(writer: ResponseWriter,
              value: TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends) {
            writer.writeString(RESPONSE_FIELDS[0], value.__typename)
            writer.writeString(RESPONSE_FIELDS[1], value.name)
            writer.writeString(RESPONSE_FIELDS[2], value.homePlanet)
            writer.writeList(RESPONSE_FIELDS[3], value.friends) { value, listItemWriter ->
              listItemWriter.writeObject { writer ->
                Friends.toResponse(writer, value)
              }
            }
          }

          object Friends :
              ResponseAdapter<TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends>
              {
            private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                responseName = "__typename",
                fieldName = "__typename",
                arguments = emptyMap(),
                conditions = emptyList(),
              )
            )

            override fun fromResponse(reader: ResponseReader, __typename: String?):
                TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends {
              val typename = __typename ?: reader.readString(RESPONSE_FIELDS[0])
              return when(typename) {
                "Droid" -> CharacterFriends.fromResponse(reader, typename)
                "Human" -> CharacterFriends.fromResponse(reader, typename)
                else -> OtherFriends.fromResponse(reader, typename)
              }
            }

            override fun toResponse(writer: ResponseWriter,
                value: TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends) {
              when(value) {
                is TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends.CharacterFriends -> CharacterFriends.toResponse(writer, value)
                is TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends.OtherFriends -> OtherFriends.toResponse(writer, value)
              }
            }

            object CharacterFriends :
                ResponseAdapter<TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends.CharacterFriends>
                {
              private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                ResponseField(
                  type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                  responseName = "__typename",
                  fieldName = "__typename",
                  arguments = emptyMap(),
                  conditions = emptyList(),
                ),
                ResponseField(
                  type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Episode")),
                  responseName = "firstAppearsIn",
                  fieldName = "firstAppearsIn",
                  arguments = emptyMap(),
                  conditions = emptyList(),
                )
              )

              override fun fromResponse(reader: ResponseReader, __typename: String?):
                  TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends.CharacterFriends {
                return reader.run {
                  var __typename: String? = __typename
                  var firstAppearsIn: Episode? = null
                  while(true) {
                    when (selectField(RESPONSE_FIELDS)) {
                      0 -> __typename = readString(RESPONSE_FIELDS[0])
                      1 -> firstAppearsIn = readString(RESPONSE_FIELDS[1])?.let { Episode.safeValueOf(it) }
                      else -> break
                    }
                  }
                  TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends.CharacterFriends(
                    __typename = __typename!!,
                    firstAppearsIn = firstAppearsIn!!
                  )
                }
              }

              override fun toResponse(writer: ResponseWriter,
                  value: TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends.CharacterFriends) {
                writer.writeString(RESPONSE_FIELDS[0], value.__typename)
                writer.writeString(RESPONSE_FIELDS[1], value.firstAppearsIn.rawValue)
              }
            }

            object OtherFriends :
                ResponseAdapter<TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends.OtherFriends>
                {
              private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                ResponseField(
                  type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                  responseName = "__typename",
                  fieldName = "__typename",
                  arguments = emptyMap(),
                  conditions = emptyList(),
                )
              )

              override fun fromResponse(reader: ResponseReader, __typename: String?):
                  TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends.OtherFriends {
                return reader.run {
                  var __typename: String? = __typename
                  while(true) {
                    when (selectField(RESPONSE_FIELDS)) {
                      0 -> __typename = readString(RESPONSE_FIELDS[0])
                      else -> break
                    }
                  }
                  TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends.OtherFriends(
                    __typename = __typename!!
                  )
                }
              }

              override fun toResponse(writer: ResponseWriter,
                  value: TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends.OtherFriends) {
                writer.writeString(RESPONSE_FIELDS[0], value.__typename)
              }
            }
          }
        }

        object OtherFriends :
            ResponseAdapter<TestQuery.Data.Search.CharacterSearch.Friends.OtherFriends> {
          private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "__typename",
              fieldName = "__typename",
              arguments = emptyMap(),
              conditions = emptyList(),
            )
          )

          override fun fromResponse(reader: ResponseReader, __typename: String?):
              TestQuery.Data.Search.CharacterSearch.Friends.OtherFriends {
            return reader.run {
              var __typename: String? = __typename
              while(true) {
                when (selectField(RESPONSE_FIELDS)) {
                  0 -> __typename = readString(RESPONSE_FIELDS[0])
                  else -> break
                }
              }
              TestQuery.Data.Search.CharacterSearch.Friends.OtherFriends(
                __typename = __typename!!
              )
            }
          }

          override fun toResponse(writer: ResponseWriter,
              value: TestQuery.Data.Search.CharacterSearch.Friends.OtherFriends) {
            writer.writeString(RESPONSE_FIELDS[0], value.__typename)
          }
        }
      }
    }

    object StarshipSearch : ResponseAdapter<TestQuery.Data.Search.StarshipSearch> {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "__typename",
          fieldName = "__typename",
          arguments = emptyMap(),
          conditions = emptyList(),
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "name",
          fieldName = "name",
          arguments = emptyMap(),
          conditions = emptyList(),
        )
      )

      override fun fromResponse(reader: ResponseReader, __typename: String?):
          TestQuery.Data.Search.StarshipSearch {
        return reader.run {
          var __typename: String? = __typename
          var name: String? = null
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> __typename = readString(RESPONSE_FIELDS[0])
              1 -> name = readString(RESPONSE_FIELDS[1])
              else -> break
            }
          }
          TestQuery.Data.Search.StarshipSearch(
            __typename = __typename!!,
            name = name!!
          )
        }
      }

      override fun toResponse(writer: ResponseWriter, value: TestQuery.Data.Search.StarshipSearch) {
        writer.writeString(RESPONSE_FIELDS[0], value.__typename)
        writer.writeString(RESPONSE_FIELDS[1], value.name)
      }
    }

    object OtherSearch : ResponseAdapter<TestQuery.Data.Search.OtherSearch> {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "__typename",
          fieldName = "__typename",
          arguments = emptyMap(),
          conditions = emptyList(),
        )
      )

      override fun fromResponse(reader: ResponseReader, __typename: String?):
          TestQuery.Data.Search.OtherSearch {
        return reader.run {
          var __typename: String? = __typename
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> __typename = readString(RESPONSE_FIELDS[0])
              else -> break
            }
          }
          TestQuery.Data.Search.OtherSearch(
            __typename = __typename!!
          )
        }
      }

      override fun toResponse(writer: ResponseWriter, value: TestQuery.Data.Search.OtherSearch) {
        writer.writeString(RESPONSE_FIELDS[0], value.__typename)
      }
    }
  }
}

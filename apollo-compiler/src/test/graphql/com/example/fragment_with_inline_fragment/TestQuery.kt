// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.fragment_with_inline_fragment

import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.internal.QueryDocumentMinifier
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.example.fragment_with_inline_fragment.adapter.TestQuery_ResponseAdapter
import com.example.fragment_with_inline_fragment.fragment.HeroDetails
import com.example.fragment_with_inline_fragment.type.Episode
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class TestQuery : Query<TestQuery.Data> {
  override fun operationId(): String = OPERATION_ID

  override fun queryDocument(): String = QUERY_DOCUMENT

  override fun variables(): Operation.Variables = Operation.EMPTY_VARIABLES

  override fun name(): String = OPERATION_NAME

  override fun adapter(): ResponseAdapter<Data> = TestQuery_ResponseAdapter
  /**
   * The query type, represents all of the entry points into our object graph
   */
  data class Data(
    val hero: Hero?
  ) : Operation.Data {
    /**
     * A character from the Star Wars universe
     */
    interface Hero {
      val __typename: String

      /**
       * The name of the character
       */
      val name: String

      /**
       * The movies this character appears in
       */
      val appearsIn: List<Episode?>

      interface Character : Hero, HeroDetails {
        /**
         * The friends of the character exposed as a connection with edges
         */
        override val friendsConnection: FriendsConnection

        /**
         * A connection object for a character's friends
         */
        interface FriendsConnection : HeroDetails.FriendsConnection {
          /**
           * The edges for each of the character's friends.
           */
          override val edges: List<Edges?>?

          /**
           * An edge object for a character's friends
           */
          interface Edges : HeroDetails.FriendsConnection.Edges {
            /**
             * The character represented by this friendship edge
             */
            override val node: Node?

            /**
             * A character from the Star Wars universe
             */
            interface Node : HeroDetails.FriendsConnection.Edges.Node
          }
        }

        interface Droid : Character, HeroDetails.Droid {
          /**
           * The friends of the character exposed as a connection with edges
           */
          override val friendsConnection: FriendsConnection

          /**
           * A connection object for a character's friends
           */
          interface FriendsConnection : Character.FriendsConnection, HeroDetails.FriendsConnection,
              HeroDetails.Droid.FriendsConnection {
            /**
             * The edges for each of the character's friends.
             */
            override val edges: List<Edges?>?

            /**
             * An edge object for a character's friends
             */
            interface Edges : Character.FriendsConnection.Edges,
                HeroDetails.FriendsConnection.Edges, HeroDetails.Droid.FriendsConnection.Edges {
              /**
               * The character represented by this friendship edge
               */
              override val node: Node?

              /**
               * A character from the Star Wars universe
               */
              interface Node : Character.FriendsConnection.Edges.Node,
                  HeroDetails.FriendsConnection.Edges.Node,
                  HeroDetails.Droid.FriendsConnection.Edges.Node
            }
          }

          interface Droid : Character.Droid, HeroDetails.Droid.Droid {
            /**
             * The friends of the character exposed as a connection with edges
             */
            override val friendsConnection: FriendsConnection

            /**
             * A connection object for a character's friends
             */
            interface FriendsConnection : Character.FriendsConnection,
                HeroDetails.FriendsConnection, HeroDetails.Droid.FriendsConnection,
                Character.Droid.FriendsConnection, HeroDetails.Droid.Droid.FriendsConnection {
              /**
               * The edges for each of the character's friends.
               */
              override val edges: List<Edges?>?

              /**
               * An edge object for a character's friends
               */
              interface Edges : Character.FriendsConnection.Edges,
                  HeroDetails.FriendsConnection.Edges, HeroDetails.Droid.FriendsConnection.Edges,
                  Character.Droid.FriendsConnection.Edges,
                  HeroDetails.Droid.Droid.FriendsConnection.Edges {
                /**
                 * The character represented by this friendship edge
                 */
                override val node: Node?

                /**
                 * A character from the Star Wars universe
                 */
                interface Node : Character.FriendsConnection.Edges.Node,
                    HeroDetails.FriendsConnection.Edges.Node,
                    HeroDetails.Droid.FriendsConnection.Edges.Node,
                    Character.Droid.FriendsConnection.Edges.Node,
                    HeroDetails.Droid.Droid.FriendsConnection.Edges.Node
              }
            }
          }
        }

        interface Human : Character, HeroDetails.Human {
          /**
           * The friends of the character exposed as a connection with edges
           */
          override val friendsConnection: FriendsConnection

          /**
           * A connection object for a character's friends
           */
          interface FriendsConnection : Character.FriendsConnection, HeroDetails.FriendsConnection,
              HeroDetails.Human.FriendsConnection {
            /**
             * The edges for each of the character's friends.
             */
            override val edges: List<Edges?>?

            /**
             * An edge object for a character's friends
             */
            interface Edges : Character.FriendsConnection.Edges,
                HeroDetails.FriendsConnection.Edges, HeroDetails.Human.FriendsConnection.Edges {
              /**
               * The character represented by this friendship edge
               */
              override val node: Node?

              /**
               * A character from the Star Wars universe
               */
              interface Node : Character.FriendsConnection.Edges.Node,
                  HeroDetails.FriendsConnection.Edges.Node,
                  HeroDetails.Human.FriendsConnection.Edges.Node
            }
          }
        }
      }

      data class CharacterDroidHero(
        override val __typename: String,
        /**
         * The name of the character
         */
        override val name: String,
        /**
         * The movies this character appears in
         */
        override val appearsIn: List<Episode?>,
        /**
         * The friends of the character exposed as a connection with edges
         */
        override val friendsConnection: FriendsConnection,
        /**
         * This droid's primary function
         */
        override val primaryFunction: String?
      ) : Hero, Character, HeroDetails, Character.Droid, HeroDetails.Droid, Character.Droid.Droid,
          HeroDetails.Droid.Droid {
        /**
         * A connection object for a character's friends
         */
        data class FriendsConnection(
          /**
           * The total number of friends
           */
          override val totalCount: Int?,
          /**
           * The edges for each of the character's friends.
           */
          override val edges: List<Edges?>?
        ) : Character.FriendsConnection, HeroDetails.FriendsConnection,
            HeroDetails.Droid.FriendsConnection, Character.Droid.FriendsConnection,
            HeroDetails.Droid.Droid.FriendsConnection, Character.Droid.Droid.FriendsConnection {
          /**
           * An edge object for a character's friends
           */
          data class Edges(
            /**
             * The character represented by this friendship edge
             */
            override val node: Node?
          ) : Character.FriendsConnection.Edges, HeroDetails.FriendsConnection.Edges,
              HeroDetails.Droid.FriendsConnection.Edges, Character.Droid.FriendsConnection.Edges,
              HeroDetails.Droid.Droid.FriendsConnection.Edges,
              Character.Droid.Droid.FriendsConnection.Edges {
            /**
             * A character from the Star Wars universe
             */
            data class Node(
              /**
               * The name of the character
               */
              override val name: String
            ) : Character.FriendsConnection.Edges.Node, HeroDetails.FriendsConnection.Edges.Node,
                HeroDetails.Droid.FriendsConnection.Edges.Node,
                Character.Droid.FriendsConnection.Edges.Node,
                HeroDetails.Droid.Droid.FriendsConnection.Edges.Node,
                Character.Droid.Droid.FriendsConnection.Edges.Node
          }
        }
      }

      data class CharacterHumanHero(
        override val __typename: String,
        /**
         * The name of the character
         */
        override val name: String,
        /**
         * The movies this character appears in
         */
        override val appearsIn: List<Episode?>,
        /**
         * The friends of the character exposed as a connection with edges
         */
        override val friendsConnection: FriendsConnection
      ) : Hero, Character, HeroDetails, Character.Human, HeroDetails.Human {
        /**
         * A connection object for a character's friends
         */
        data class FriendsConnection(
          /**
           * The total number of friends
           */
          override val totalCount: Int?,
          /**
           * The edges for each of the character's friends.
           */
          override val edges: List<Edges?>?
        ) : Character.FriendsConnection, HeroDetails.FriendsConnection,
            HeroDetails.Human.FriendsConnection, Character.Human.FriendsConnection {
          /**
           * An edge object for a character's friends
           */
          data class Edges(
            /**
             * The character represented by this friendship edge
             */
            override val node: Node?
          ) : Character.FriendsConnection.Edges, HeroDetails.FriendsConnection.Edges,
              HeroDetails.Human.FriendsConnection.Edges, Character.Human.FriendsConnection.Edges {
            /**
             * A character from the Star Wars universe
             */
            data class Node(
              /**
               * The name of the character
               */
              override val name: String
            ) : Character.FriendsConnection.Edges.Node, HeroDetails.FriendsConnection.Edges.Node,
                HeroDetails.Human.FriendsConnection.Edges.Node,
                Character.Human.FriendsConnection.Edges.Node
          }
        }
      }

      data class OtherHero(
        override val __typename: String,
        /**
         * The name of the character
         */
        override val name: String,
        /**
         * The movies this character appears in
         */
        override val appearsIn: List<Episode?>
      ) : Hero

      companion object {
        fun Hero.asCharacter(): Character? = this as? Character

        fun Hero.heroDetails(): HeroDetails? = this as? HeroDetails
      }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "e01fcc7b255552f79419f653def959b6a7ab9bffd519c57e826d91ffc2c7fb1f"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query TestQuery {
          |  hero {
          |    __typename
          |    name
          |    ...HeroDetails
          |    appearsIn
          |  }
          |}
          |fragment HeroDetails on Character {
          |  __typename
          |  ...HumanDetails
          |  ... on Droid {
          |    __typename
          |    ...DroidDetails
          |  }
          |  name
          |  friendsConnection {
          |    totalCount
          |    edges {
          |      node {
          |        name
          |      }
          |    }
          |  }
          |}
          |fragment HumanDetails on Human {
          |  __typename
          |  name
          |}
          |fragment DroidDetails on Droid {
          |  __typename
          |  name
          |  primaryFunction
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: String = "TestQuery"
  }
}
